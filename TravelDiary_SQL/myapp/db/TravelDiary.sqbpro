<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/kunchao/Desktop/5200Database/myapp/db/TravelDiary.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1533"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainStates"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Destinations" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="43"/><column index="2" value="170"/><column index="3" value="47"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Restaurants" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="42"/><column index="2" value="183"/><column index="3" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Reviews" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="57"/><column index="2" value="43"/><column index="3" value="42"/><column index="4" value="39"/><column index="5" value="31"/><column index="6" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="States" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="47"/><column index="2" value="36"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- Test1. How many states  each user has been to
SELECT Users.username as &quot;Users&quot;, State
FROM Users
JOIN User_Destinations ON Users.userID = User_Destinations.userID
JOIN Destinations ON User_Destinations.DestID = Destinations.DestID
JOIN States ON States.StateID = Destinations.StateID
ORDER BY &quot;Users&quot; ASC, &quot;State&quot; ASC

--Restaurants with &gt;10 reviews from different users
SELECT Restaurants.RestName, COUNT(Users.userID) AS UserCounts
FROM Users 
JOIN Reviews ON Reviews.UserID = Users.userID
JOIN Restaurants on Restaurants.RestID = Reviews.RestID
GROUP BY Restaurants.RestName
HAVING UserCounts &gt; 10


--Subquery used to find restaurts and destinations with Restaurants cost &gt; 100 in reviews
SELECT Restaurants.RestName AS &quot;Restaurants&quot;, Destinations.Destination AS &quot;Destinaion&quot;
FROM Restaurants 
INNER JOIN Destinations ON Destinations.DestID = Restaurants.DestID
WHERE Restaurants.RestName IN(
	SELECT Restaurants.RestName
	FROM Restaurants
	JOIN Reviews  ON Reviews.RestID = Restaurants.RestID
	WHERE Reviews.cost &gt; 100
	)


--Lists states starts with letter &quot;C&quot; or &quot;N&quot;, destinations with restaurants which have more than 3 reviewers, list the avg rating of rach
SELECT States.State, Destinations.Destination,  Restaurants.RestName, COUNT(Users.userID) AS &quot;Reviewers&quot;, 
				ROUND(AVG(Reviews.rating),2) AS&quot;AvgRating&quot;
FROM States
JOIN Destinations ON Destinations.StateID = States.StateID
JOIN Restaurants ON Restaurants.RestID = Destinations.DestID
JOIN Reviews ON Reviews.RestID = Restaurants.RestID 
JOIN Users ON Users.userID = Reviews.UserID
WHERE States.State LIKE  &quot;C%&quot; OR States.State LIKE &quot;N%&quot;
GROUP BY Restaurants.RestName
HAVING Reviewers &gt; 3

--Test with PARTITION BY 
SELECT States.State, Restaurants.RestName, ROUND(AVG(Reviews.cost) OVER (
	PARTITION BY Restaurants.RestName), 2) AS &quot;AvgCost&quot;
	FROM States
	JOIN Destinations ON Destinations.StateID = States.StateID
	JOIN Restaurants ON Restaurants.DestID = Destinations.DestID
	JOIN Reviews ON Reviews.RestID = Restaurants.RestID
	JOIN Users ON  Users.userID = Reviews.UserID
ORDER BY States.State ASC</sql><current_tab id="0"/></tab_sql></sqlb_project>
